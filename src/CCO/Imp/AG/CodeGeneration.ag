imports
{
import CCO.Ssm hiding (Add, Sub, Mul, Div, Eq, Lt, Gt)
import Prelude hiding (div)
import Data.List (intersperse, nub, (\\))

import Debug.Trace
}

-------------------------------------------------------------------------------
-- Labels
-------------------------------------------------------------------------------

-- Handing out fresh program-point labels where necessary.

attr Decl Decls Stmt Stmts Exp Exps
  inh labels  :: {[Label]}
  syn labels  :: {[Label]}
  syn tocache :: {[Ident]}

sem Prog  | TopLevelDecls  ds .labels  = [0 ..]

sem Decl  | FunDecl        loc.beginLabel = @lhs.labels !! 0
                           loc.endLabel   = @lhs.labels !! 1
                           b  .labels     = drop 2 @lhs.labels
                           lhs.tocache    = @b.tocache
          | VarDecl        lhs.tocache    = []

sem Decls | Nil            lhs.tocache    = []

sem Stmt  | If             loc.elseLabel  = @lhs.labels !! 0
                           loc.fiLabel    = @lhs.labels !! 1
                           e  .labels     = drop 2 @lhs.labels
                           lhs.tocache    = @s1.tocache ++ @s2.tocache

-------------------------------------------------------------------------------
-- Offsets
-------------------------------------------------------------------------------

-- Calculating the mark-pointer relative offsets at which variables are to be
-- allocated.

attr Decl Decls Stmt Stmts
  inh offset :: {Int}
  syn offset :: {Int}

sem Prog | TopLevelDecls    ds .offset = 1
sem Decl | VarDecl          lhs.offset = @lhs.offset + 1
         | FunDecl          b  .offset = 1
sem Stmt | Block            lhs.offset = @lhs.offset

-------------------------------------------------------------------------------
-- Environments
-------------------------------------------------------------------------------

{
-- | An environment maps identifiers to symbol descriptors.
type Env = [(Ident, Sym)]

-- | A symbol descriptor either describes a variable or a function symbol.
-- For a variable, we store its offset relative to the mark pointer; for
-- a function we store its begin label.
data Sym = V Int | F Int
           deriving (Show, Eq)

-- | Restrict environments to a particular type of descriptor.
vars   env = [entry | entry@(_, V _     ) <- env            ]
funs   env = [entry | entry@(_, F _     ) <- env            ]
params env = [entry | entry@(_, V offset) <- env, offset < 0]
}

-- For each block of statements or declarations, we construct a local
-- environment.

attr Decl Decls Stmt Stmts
  syn env use {++} {[]} :: {Env}

sem Decl | VarDecl  lhs.env = [(@x, V @lhs.offset    )]
         | FunDecl  lhs.env = [(@f, F @loc.beginLabel)]

sem Stmt | Block    lhs.env = []

-- Furthermore, we construct a subenvironment for the parameters of a function.

sem Decl | FunDecl
  loc.params = zipWith (\x i -> (x, V i)) @xs [- (2 + length @xs) ..]

-------------------------------------------------------------------------------
-- Symbol tables
-------------------------------------------------------------------------------

{
-- | A symbol table contains descriptors for each variable that is in scope at
-- a certain program point.
-- The table consists of levels of 'Env's reflecting the nesting of functions:
-- * The head of the list of 'Env's corresponds to the innermost function scope
--   and so it contains the descriptors of the symbols that are allocated
--   relative to the current mark pointer.
-- * To access the symbols described in the tail of the list, static links are
--   to be followed.
type Syms = [Env]
}

-- Symbol-table construction.

attr Decl Decls Stmt Stmts Exp Exps
  inh syms :: {Syms}

sem Prog | TopLevelDecls  ds.syms = [@ds.env]
sem Decl | FunDecl        b .syms = (@loc.params ++ @b.env) : @lhs.syms
sem Stmt | Block          b .syms = let local : global = @lhs.syms
                                    in  (local ++ @b.env) : global

sem Stmt | Empty  lhs.tocache = []
         -- never called:
         | Block  lhs.tocache = @b.tocache -- let local : global = @lhs.tocache
         | Assign lhs.tocache = @x : @e.tocache
         | Print  lhs.tocache = @e.tocache
         | Return lhs.tocache = @e.tocache
                               

-------------------------------------------------------------------------------
-- Minimal pretty printing of Exp for use in SSM annotations
-------------------------------------------------------------------------------

attr Exp
  syn ann use {++} {""} :: {String}
attr Exps
  syn anns :: {[String]}

sem Exp | Int     loc.ann = show @n
        | False_  loc.ann = "False"
        | True_   loc.ann = "True"
        | Var     loc.ann = @x
        | Call    loc.ann = @f ++ "(" ++ concat (intersperse "," @es.anns) ++ ")"
        | Add     loc.ann = @e1.ann ++ "+"  ++ @e2.ann
        | Sub     loc.ann = @e1.ann ++ "-"  ++ @e2.ann
        | Mul     loc.ann = @e1.ann ++ "*"  ++ @e2.ann
        | Div     loc.ann = @e1.ann ++ "/"  ++ @e2.ann
        | Lt      loc.ann = @e1.ann ++ "<"  ++ @e2.ann
        | Eq      loc.ann = @e1.ann ++ "==" ++ @e2.ann
        | Gt      loc.ann = @e1.ann ++ ">"  ++ @e2.ann

sem Exp | Int     lhs.tocache = []
        | False_  lhs.tocache = []
        | True_   lhs.tocache = []
        | Var     lhs.tocache = [@x]
        | Call    lhs.tocache = @es.tocache
        | Add     lhs.tocache = @e1.tocache ++ @e2.tocache
        | Sub     lhs.tocache = @e1.tocache ++ @e2.tocache
        | Mul     lhs.tocache = @e1.tocache ++ @e2.tocache
        | Div     lhs.tocache = @e1.tocache ++ @e2.tocache
        | Lt      lhs.tocache = @e1.tocache ++ @e2.tocache
        | Gt      lhs.tocache = @e1.tocache ++ @e2.tocache
        | Eq      lhs.tocache = @e1.tocache ++ @e2.tocache
        

sem Exps | Nil    lhs.anns = []
                  lhs.tocache = []
         | Cons   lhs.anns = @hd.ann : @tl.anns
                  lhs.tocache = @hd.tocache ++ @tl.tocache

sem Exp | *       loc.annote = annote SP 0 0 "green" @ann

sem Stmts | Nil lhs.tocache = []
          | Cons lhs.tocache = @hd.tocache ++ @tl.tocache

-------------------------------------------------------------------------------
-- Code generation
-------------------------------------------------------------------------------

attr Decl Decls Stmt Stmts Exp Exps
  syn codes use {.} {id} :: {CodeS}

sem Prog | TopLevelDecls  loc.codes = @ds.codes .
                                      enter @ds.env .
                                      call "main" [@ds.env] .
                                      ajs (- 1) .
                                      exit @ds.env [] -- no cached variables here.

sem Decl | FunDecl  lhs.codes = bra @loc.endLabel .
                                label @loc.beginLabel .
                                  ldr MP .
                                  ldrr MP SP .
                                  enterparams @loc.params .
                                  enter @b.env .
                                  cachevars @b.tocache @lhs.syms @b.env .
                                  @b.codes .
                                  exit @b.env @b.tocache .
                                  ldc 0 .
                                  return_ (@loc.params : @lhs.syms) .
                                label @loc.endLabel

sem Stmt | Assign  lhs.codes = @e.codes . set @x @lhs.syms
         | Call_   lhs.codes = @es.codes .
                               call @f @lhs.syms .
                               ajs (- 1)
         | Print   lhs.codes = @e.codes . trap 0
         | Return  lhs.codes = @e.codes . return_ @lhs.syms
         | If      lhs.codes = @e.codes .
                               brf @loc.elseLabel .
                               @s1.codes .
                               bra @loc.fiLabel .
                               label @loc.elseLabel .
                                 @s2.codes .
                               label @loc.fiLabel
         | Block   lhs.codes = enter @b.env .
                               @b.codes .
                               exit @b.env @b.tocache

sem Exp | Int     lhs.codes = ldc @n . @annote
        | False_  lhs.codes = ldc 0 . @annote
        | True_   lhs.codes = ldc 1 . @annote
        | Var     lhs.codes = get @x @lhs.syms . @annote
        | Call    lhs.codes = @es.codes . call @f @lhs.syms
        | Add     lhs.codes = @e1.codes . @e2.codes . add . @annote
        | Sub     lhs.codes = @e1.codes . @e2.codes . sub . @annote
        | Mul     lhs.codes = @e1.codes . @e2.codes . mul . @annote
        | Div     lhs.codes = @e1.codes . @e2.codes . div . @annote
        | Lt      lhs.codes = @e1.codes . @e2.codes . lt . @annote
        | Eq      lhs.codes = @e1.codes . @e2.codes . eq . @annote
        | Gt      lhs.codes = @e1.codes . @e2.codes . gt . @annote

attr Prog
  syn code :: {Code}

sem Prog | TopLevelDecls  lhs.code = Code (@loc.codes [])

-------------------------------------------------------------------------------
-- Auxiliary code-generation functions
-------------------------------------------------------------------------------

{

cachevars :: [Ident] -> Syms -> Env -> CodeS
cachevars is syms env = trace (show is ++ ", and env=" ++ show (vars env)) (foldr (.) id [getCache i syms | i <- (nub is)\\(map fst (vars env))])

-- | Produces code for annotating parameters.
enterparams :: Env -> CodeS
enterparams env = foldr (.) id [annote MP off off "green" (x ++ " (param)") | (x, V off) <- env]

-- | Produces code for entering a block.
enter :: Env -> CodeS
enter env = foldr (.) id [ldc 0 . annote SP 0 0 "green" (x ++ " (var)") | (x, V _) <- env]

-- | Produces code for exiting a block.
-- TODO modify me to kill cached vars too.
exit :: Env -> [Ident] -> CodeS
exit env cache = ajs (- length (vars env) - length (nub cache))

-- | cache the addresses.
getCache :: Ident -> Syms -> CodeS
getCache x (local : global) = case lookup x (vars local) of
  Nothing         -> ldl (- 2) . getGlobalCache x global
  Just (V offset) -> ldl (- 2) -- TODO WRONG?? maybe not

-- | Produces code for retrieving the value of a variable.
get :: Ident -> Syms -> CodeS
get x (local : global) = case lookup x (vars local) of
  Nothing         -> getGlobal x global
  Just (V offset) -> ldl offset

-- from Norm
-- getGlobal' :: Ident -> Syms -> CodeS
-- getGlobal' x [] = error ("unknown variable: " ++ x)
-- getGlobal' x (local : global) = case lookup x (vars local) of
--   Nothing         -> getGlobal' x global
--   Just (V offset) -> ldl (length global + 1) . lda offset


-- | Produces code for retrieving the address of a global.
getGlobalCache :: Ident -> Syms -> CodeS
                            --  here we assume the variable is local?
getGlobalCache x []           = error ("unknown variable: " ++ x)
--getGlobalCache x []           = nop -- undefined -- error ("unknown variable: " ++ x)
getGlobalCache x (env : envs) = case lookup x (vars env) of
  Nothing         -> lda (- 2) . getGlobalCache x envs
  Just (V offset) -> lda (- 2) -- TODO WRONG?? maybe not. this last step places the addy on the stack

-- | Produces code for retrieving the value of a global variable.
getGlobal :: Ident -> Syms -> CodeS
getGlobal x []           = error ("unknown variable: " ++ x)
getGlobal x (env : envs) = case lookup x (vars env) of
  Nothing         -> getGlobal x envs
  Just (V offset) -> ldl (length envs + 1) . lda offset
  --Just (V offset) -> ldl offset . lda offset

-- | Produces code for assigning a new value to a variable.
set :: Ident -> Syms -> CodeS
set x (local : global) = case lookup x (vars local) of
  Nothing         -> setGlobal x global
  Just (V offset) -> stl offset

-- | Produces code for assigning a new value to a global variable.
setGlobal :: Ident -> Syms -> CodeS
setGlobal x []           = error ("unknown variable: " ++ x)
setGlobal x (env : envs) = case lookup x (vars env) of
  Nothing         -> setGlobal x envs
  Just (V offset) -> ldl offset . sta offset

-- | Produces code for calling a function.
call :: Ident -> Syms -> CodeS
call f (local : global) = case lookup f (funs local) of
  Nothing             -> ldl (- 2) . callGlobal f global
  Just (F beginLabel) -> ldr MP . ldcL beginLabel . jsr

-- | Produces code for calling a global function.
callGlobal :: Ident -> Syms -> CodeS
callGlobal f []           = error ("unknown function: " ++ f)
callGlobal f (env : envs) = case lookup f (funs env) of
  Nothing             -> lda (- 2) . callGlobal f envs
  Just (F beginLabel) -> ldcL beginLabel . jsr

-- | Produces code for returning from a function.
return_ :: Syms -> CodeS
return_ (local : _) =
  sts (- (length (vars local) + 3)) .
  ldrr SP MP .
  str MP .
  sts (- length (params local)) .
  ajs (- (length (params local) - 1)) .
  ret
}
